#!/usr/bin/env dart

import 'dart:io';

Future<void> main(List<String> arguments) async {
  print('\x1B[36mü™∂ Plumer CLI - Flutter scaffolding made easy\x1B[0m');

  if (!await _isFlutterProject()) {
    print('\x1B[31m‚ùå This is not a Flutter project. Exiting.\x1B[0m');
    exit(1);
  }

  final packageName = await _getPackageName();
  final command = arguments[0];

  if (command == 'init') {
    await _initProject();
  } else {
    if (arguments.length < 2) {
      print('\x1B[31m‚ùå Missing required path argument for "$command".\x1B[0m');
      print('Example: plumer $command Booking/Flight');
      exit(1);
    }

    final rawPath = arguments[1];
    final pathParts = rawPath.split('/');
    final classBaseName = _toPascalCase(pathParts.last);
    final folderPath = pathParts.length > 1
        ? pathParts.sublist(0, pathParts.length - 1).map(_toSnakeCase).join('/')
        : '';
    final snakeName = _toSnakeCase(pathParts.last);

    switch (command) {
      case 'make:controller':
        await _createController(folderPath, classBaseName, snakeName);
        break;
      case 'make:binding':
        await _createBinding(folderPath, classBaseName, snakeName, packageName);
        break;
      case 'make:screen':
        await _createScreen(folderPath, classBaseName, snakeName, packageName);
        break;
      case 'make:page':
        await _makePage(folderPath, classBaseName, snakeName, packageName);
        break;
      default:
        print('\x1B[31m‚ùå Unknown command: $command\x1B[0m');
    }
  }
}

Future<void> _initProject() async {
  final pubspec = File('pubspec.yaml');
  if (!pubspec.existsSync()) {
    print('\x1B[31m‚ùå Error: Not a Flutter project. pubspec.yaml not found.\x1B[0m');
    exit(1);
  }

  print('\x1B[36müöÄ Initializing Flutter project with GetX and Dio...\x1B[0m');

  // Install GetX and Dio
  await Process.run('dart', ['pub', 'add', 'get']);
  await Process.run('dart', ['pub', 'add', 'dio']);

  print('\x1B[32m‚úÖ Installed GetX and Dio.\x1B[0m');

  // Create folder structure
  final dirs = [
    'lib/config',
    'lib/controllers',
    'lib/bindings',
    'lib/models',
    'lib/screens',
    'lib/widgets',
  ];
  for (var dir in dirs) {
    await Directory(dir).create(recursive: true);
  }
  print('\x1B[32m‚úÖ Created recommended folder structure.\x1B[0m');

  // Create app_colors.dart
  final appColorsContent = '''
import 'package:flutter/material.dart';

class AppColors {
  static const Color primary = Color(0xFF340404); // Deep red
  static const Color accent = Color(0xFFF5B300); // Vibrant yellow
  static const Color appBarColor = Colors.white;
  static const Color appBarBackground = primary;
}
''';
  await File('lib/config/app_colors.dart').writeAsString(appColorsContent);
  print('\x1B[32m‚úÖ Created lib/config/app_colors.dart\x1B[0m');

  // Create app_routes.dart
  final appRoutesContent = '''
import 'package:get/get.dart';

class AppRoutes {
  static final routes = <GetPage>[];
}
''';
  await File('lib/config/app_routes.dart').writeAsString(appRoutesContent);
  print('\x1B[32m‚úÖ Created lib/config/app_routes.dart\x1B[0m');

  // Create MainPage
  final mainPageContent = '''
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import '../config/app_colors.dart';

class MainPage extends StatelessWidget {
  const MainPage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Welcome to Plumer'),
        backgroundColor: AppColors.appBarBackground,
        foregroundColor: AppColors.appBarColor,
      ),
      body: const Center(
        child: Text(
          'Plumer initialized your Flutter project!',
          style: TextStyle(fontSize: 18),
        ),
      ),
    );
  }
}
''';
  await File('lib/screens/main_page.dart').writeAsString(mainPageContent);
  print('\x1B[32m‚úÖ Created lib/screens/main_page.dart\x1B[0m');

  // Replace main.dart
  final mainDartContent = '''
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'config/app_colors.dart';
import 'config/app_routes.dart';
import 'screens/main_page.dart';

void main() {
  runApp(const PlumerApp());
}

class PlumerApp extends StatelessWidget {
  const PlumerApp({super.key});

  @override
  Widget build(BuildContext context) {
    return GetMaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Plumer App',
      theme: ThemeData(
        primaryColor: AppColors.primary,
        scaffoldBackgroundColor: Colors.white,
        fontFamily: 'Roboto',
      ),
      initialRoute: '/',
      getPages: [
        GetPage(name: '/', page: () => const MainPage()),
        ...AppRoutes.routes,
      ],
    );
  }
}
''';
  await File('lib/main.dart').writeAsString(mainDartContent);
  print('\x1B[32m‚úÖ Overwrote lib/main.dart with Plumer starter template.\x1B[0m');

  print('\x1B[36müéâ Plumer initialization complete! Run your app with:\n   flutter run\x1B[0m');
}


Future<bool> _isFlutterProject() async {
  final pubspec = File('pubspec.yaml');
  if (!pubspec.existsSync()) return false;
  final content = await pubspec.readAsString();
  return content.contains('flutter:');
}

Future<String> _getPackageName() async {
  final pubspec = File('pubspec.yaml');
  if (!pubspec.existsSync()) {
    print('\x1B[31m‚ùå pubspec.yaml not found. Exiting.\x1B[0m');
    exit(1);
  }
  final content = await pubspec.readAsLines();
  for (final line in content) {
    final trimmed = line.trim();
    if (trimmed.startsWith('name:')) {
      final name = trimmed.substring(5).trim();
      if (name.isNotEmpty) return name;
    }
  }
  print('\x1B[31m‚ùå Could not find project name in pubspec.yaml. Exiting.\x1B[0m');
  exit(1);
}

Future<void> _makePage(String folder, String pascal, String snake, String packageName) async {
  final controllerPath = 'lib/controllers${folder.isNotEmpty ? '/$folder' : ''}/${snake}_controller.dart';
  final bindingPath = 'lib/bindings${folder.isNotEmpty ? '/$folder' : ''}/${snake}_binding.dart';
  final screenPath = 'lib/screens${folder.isNotEmpty ? '/$folder' : ''}/${snake}_screen.dart';

  final routeName = "/${folder.isNotEmpty ? folder + '/' : ''}${snake}".replaceAll('_', '');
  final routeSignature = "GetPage(name: '$routeName',";

  final appRoutesFile = File('lib/config/app_routes.dart');
  if (!appRoutesFile.existsSync()) {
    print('\x1B[31m‚ùå lib/config/app_routes.dart not found. Cannot update routes.\x1B[0m');
    exit(1);
  }

  final appRoutesContent = await appRoutesFile.readAsString();

  final conflicts = <String>[];
  if (File(controllerPath).existsSync()) conflicts.add(controllerPath);
  if (File(bindingPath).existsSync()) conflicts.add(bindingPath);
  if (File(screenPath).existsSync()) conflicts.add(screenPath);
  if (appRoutesContent.contains(routeSignature)) conflicts.add('Route already exists in app_routes.dart');

  if (conflicts.isNotEmpty) {
    print('\x1B[31m‚ùå Cannot create page because the following already exist:\x1B[0m');
    for (final c in conflicts) {
      print(' - $c');
    }
    print('\x1B[31mAborting and reverting changes.\x1B[0m');
    exit(1);
  }

  await _createController(folder, pascal, snake);
  await _createBinding(folder, pascal, snake, packageName);
  await _createScreen(folder, pascal, snake, packageName);
  await _updateAppRoutes(folder, pascal, snake, packageName);

  print('\x1B[32m‚úÖ Page created and registered in routes for "$folder/$pascal".\x1B[0m');
}

Future<void> _createController(String folder, String pascal, String snake) async {
  final dir = 'lib/controllers${folder.isNotEmpty ? '/$folder' : ''}';
  final file = File('$dir/${snake}_controller.dart');
  await file.create(recursive: true);
  await file.writeAsString('''
import 'package:get/get.dart';

class ${pascal}Controller extends GetxController {

}
''');
  print('\x1B[32m‚úÖ Controller created: ${file.path}\x1B[0m');
}

Future<void> _createBinding(String folder, String pascal, String snake, String packageName) async {
  final dir = 'lib/bindings${folder.isNotEmpty ? '/$folder' : ''}';
  final file = File('$dir/${snake}_binding.dart');
  await file.create(recursive: true);
  final importPath = 'package:$packageName/controllers${folder.isNotEmpty ? '/$folder' : ''}/${snake}_controller.dart';
  await file.writeAsString('''
import 'package:get/get.dart';
import '$importPath';

class ${pascal}Binding extends Bindings {
  @override
  void dependencies() {
    Get.lazyPut<${pascal}Controller>(() => ${pascal}Controller());
  }
}
''');
  print('\x1B[32m‚úÖ Binding created: ${file.path}\x1B[0m');
}

Future<void> _createScreen(String folder, String pascal, String snake, String packageName) async {
  final dir = 'lib/screens${folder.isNotEmpty ? '/$folder' : ''}';
  final file = File('$dir/${snake}_screen.dart');
  await file.create(recursive: true);
  final importPath = 'package:$packageName/controllers${folder.isNotEmpty ? '/$folder' : ''}/${snake}_controller.dart';
  await file.writeAsString('''
import 'package:get/get.dart';
import 'package:flutter/material.dart';
import 'package:$packageName/config/app_colors.dart';
import '$importPath';

class ${pascal}Screen extends GetView<${pascal}Controller> {
  const ${pascal}Screen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('${_splitPascalCase(pascal)}'),
        backgroundColor: AppColors.appBarBackground,
        foregroundColor: AppColors.appBarColor,
      ),
      body: const Center(
        child: Text(
          '${_splitPascalCase(pascal)} Screen',
          style: TextStyle(color: AppColors.primary, fontSize: 24),
        ),
      ),
    );
  }
}
''');
  print('\x1B[32m‚úÖ Screen created: ${file.path}\x1B[0m');
}

Future<void> _updateAppRoutes(
  String folder,
  String pascal,
  String snake,
  String packageName,
) async {
  final appRoutesFile = File('lib/config/app_routes.dart');

  if (!appRoutesFile.existsSync()) {
    print('\x1B[31m‚ùå lib/config/app_routes.dart not found.\x1B[0m');
    exit(1);
  }

  var content = await appRoutesFile.readAsString();

  final importBinding =
      "import 'package:$packageName/bindings${folder.isNotEmpty ? '/$folder' : ''}/${snake}_binding.dart';";
  final importScreen =
      "import 'package:$packageName/screens${folder.isNotEmpty ? '/$folder' : ''}/${snake}_screen.dart';";

  final routeName =
      "/${folder.isNotEmpty ? folder + '/' : ''}${snake}".replaceAll('_', '');
  final pageRegistration =
      "GetPage(name: '$routeName', page: () => const ${pascal}Screen(), binding: ${pascal}Binding()),";

  // Insert imports at top if not present
  if (!content.contains(importBinding)) {
    // Put AFTER the last import OR at top
    final importRegex = RegExp(r"(import .+;)");
    final matches = importRegex.allMatches(content).toList();
    if (matches.isNotEmpty) {
      final lastImport = matches.last;
      content = content.replaceRange(
        lastImport.end,
        lastImport.end,
        '\n$importBinding',
      );
    } else {
      content = '$importBinding\n$content';
    }
  }

  if (!content.contains(importScreen)) {
    final importRegex = RegExp(r"(import .+;)");
    final matches = importRegex.allMatches(content).toList();
    if (matches.isNotEmpty) {
      final lastImport = matches.last;
      content = content.replaceRange(
        lastImport.end,
        lastImport.end,
        '\n$importScreen',
      );
    } else {
      content = '$importScreen\n$content';
    }
  }

  // Flexible route list regex for [] or <GetPage>[]
  final routesRegex =
      RegExp(r'static final routes\s*=\s*(<GetPage>)?\[(.*?)\];', dotAll: true);
  final match = routesRegex.firstMatch(content);

  if (match != null) {
    final currentRoutes = match.group(2)?.trim() ?? '';
    final updatedRoutes = (currentRoutes.isEmpty)
        ? '  $pageRegistration'
        : '$currentRoutes\n    $pageRegistration';

    final newRoutes = match.group(1) != null
        ? 'static final routes = <GetPage>[\n$updatedRoutes\n  ];'
        : 'static final routes = [\n$updatedRoutes\n  ];';

    content = content.replaceFirst(routesRegex, newRoutes);

    await appRoutesFile.writeAsString(content);
    print(
        '\x1B[32m‚úÖ Route for "$routeName" added to lib/config/app_routes.dart\x1B[0m');
  } else {
    print(
        '\x1B[31m‚ùå Could not locate routes list in app_routes.dart. Please ensure it uses: static final routes = []; or static final routes = <GetPage>[];\x1B[0m');
    exit(1);
  }
}

String _toSnakeCase(String input) {
  return input.replaceAllMapped(
      RegExp(r'([a-z0-9])([A-Z])'), (Match m) => '${m[1]}_${m[2]}').toLowerCase();
}

String _toPascalCase(String input) {
  return input
      .split(RegExp(r'[_\-\s]'))
      .where((part) => part.isNotEmpty)
      .map((part) => part[0].toUpperCase() + part.substring(1))
      .join();
}

String _splitPascalCase(String input) {
  return input.replaceAllMapped(RegExp(r'([a-z])([A-Z])'), (m) => '${m[1]} ${m[2]}');
}


